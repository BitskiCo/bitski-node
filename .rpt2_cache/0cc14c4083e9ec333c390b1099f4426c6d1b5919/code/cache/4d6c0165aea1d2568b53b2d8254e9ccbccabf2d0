{"map":"{\"version\":3,\"file\":\"bitski-provider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/bitski-provider.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,MAAM,MAAM,eAAe,CAAC;AAEnC,IAAM,kBAAkB,GAAG,2BAA2B,CAAC;AAEvD;;GAEG;AACH;IAAoC,0CAAiB;IAMnD;;;OAGG;IACH,wBAAY,WAA+B,EAAE,IAAY;QAA7C,4BAAA,EAAA,uBAA+B;QAA3C,iBAqBC;QApBC,IAAI,QAAQ,GAAG;YACb,iBAAiB,EAAE,SAAS;YAC5B,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,MAAM,EAAE,IAAI;aACb;YACD,SAAS,EAAE;gBACT,IAAI,EAAE,EAAE;gBACR,SAAS,EAAE,EAAE;aACd;YACD,WAAW,EAAE;gBACX,KAAK,EAAE,UAAU;aAClB;SACF,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC9B,IAAM,MAAM,GAAM,kBAAkB,cAAS,WAAa,CAAC;QAC3D,QAAA,kBAAM,MAAM,EAAE,CAAC,EAAE,QAAQ,CAAC,iBAAiB,CAAC,SAAC;QAC7C,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QAC7F,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;IAC3B,CAAC;IAEM,uCAAc,GAArB;QAAA,iBAUC;QATC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,KAAK,EAAE;YAC1D,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAA,iBAAiB;YAClG,IAAM,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YACrE,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;YAC1E,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACjC,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,qBAAC;AAAD,CAAC,AA5CD,CAAoC,iBAAiB,GA4CpD\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport { AccessToken } from './access-token';\r\nimport { OAuthHttpProvider } from './oauth-http-provider';\r\nimport OAuth2 from 'simple-oauth2';\r\nvar BITSKI_API_V1_HOST = 'https://api.bitski.com/v1';\r\n/**\r\n * A Web3 provider that connects to the Bitski service\r\n */\r\nvar BitskiProvider = /** @class */ (function (_super) {\r\n    tslib_1.__extends(BitskiProvider, _super);\r\n    /**\r\n     * @param networkName Network name\r\n     * @param opts Options\r\n     */\r\n    function BitskiProvider(networkName, opts) {\r\n        if (networkName === void 0) { networkName = 'mainnet'; }\r\n        var _this = this;\r\n        var settings = {\r\n            additionalHeaders: undefined,\r\n            client: {\r\n                id: null,\r\n                secret: null\r\n            },\r\n            authority: {\r\n                host: '',\r\n                tokenPath: ''\r\n            },\r\n            tokenConfig: {\r\n                scope: 'eth_sign'\r\n            }\r\n        };\r\n        Object.assign(settings, opts);\r\n        var rpcURL = BITSKI_API_V1_HOST + \"/web3/\" + networkName;\r\n        _this = _super.call(this, rpcURL, 0, settings.additionalHeaders) || this;\r\n        _this.oauthClient = OAuth2.create({ client: settings.client, authority: settings.authority });\r\n        _this.networkName = networkName;\r\n        _this.settings = settings;\r\n        return _this;\r\n    }\r\n    BitskiProvider.prototype.getAccessToken = function () {\r\n        var _this = this;\r\n        if (this.accessToken && this.accessToken.expired === false) {\r\n            return Promise.resolve(this.accessToken);\r\n        }\r\n        return this.oauthClient.clientCredentials.getToken(this.settings.tokenConfig).then(function (accessTokenResult) {\r\n            var token = _this.oauthClient.accessToken.create(accessTokenResult);\r\n            var accessToken = new AccessToken(token.access_token, token.expires_at);\r\n            _this.setAccessToken(accessToken);\r\n            return accessToken;\r\n        });\r\n    };\r\n    return BitskiProvider;\r\n}(OAuthHttpProvider));\r\nexport { BitskiProvider };\r\n//# sourceMappingURL=bitski-provider.js.map","dts":{"name":"/Users/jp/Work/bitski-node/dist/types/bitski-provider.d.ts","writeByteOrderMark":false,"text":"import { AccessToken } from './access-token';\r\nimport { OAuthHttpProvider } from './oauth-http-provider';\r\n/**\r\n * A Web3 provider that connects to the Bitski service\r\n */\r\nexport declare class BitskiProvider extends OAuthHttpProvider {\r\n    private networkName;\r\n    private settings;\r\n    private oauthClient;\r\n    /**\r\n     * @param networkName Network name\r\n     * @param opts Options\r\n     */\r\n    constructor(networkName: string | undefined, opts: object);\r\n    getAccessToken(): Promise<AccessToken>;\r\n}\r\n"}}
