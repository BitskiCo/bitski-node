{"map":"{\"version\":3,\"file\":\"oauth-http-provider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/oauth-http-provider.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,MAAM,CAAC;AACd,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAG3C;;GAEG;AACH;IAaE;;;;OAIG;IACH,2BAAY,IAAY,EAAE,OAAgB,EAAE,iBAAyB;QAjBrE;;WAEG;QACH,gBAAW,GAAiB,SAAS,CAAC;QAepC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC;IACnC,CAAC;IAEM,0CAAc,GAArB,UAAsB,WAAyB;QAC7C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,0CAAc,GAArB;QACE,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC1C;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,CAAC;IACtE,CAAC;IAED;;;OAGG;IACK,0CAAc,GAAtB;QACE,IAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;QACrC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACtC,OAAO,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAE7D,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;gBACrB,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAA,WAAW;YAC3C,OAAO,CAAC,gBAAgB,CAAC,eAAe,EAAE,YAAU,WAAW,CAAC,KAAO,CAAC,CAAC;YACzE,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAI,GAAX,UAAY,OAAY,EAAE,QAAa;QAAvC,iBA6BC;QA5BC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;YAChC,OAAO,CAAC,kBAAkB,GAAG;gBACzB,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,KAAK,CAAC,EAAE;oBACnD,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;oBAClC,IAAI,KAAK,GAAG,IAAI,CAAC;oBAEjB,IAAI;wBACA,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;qBAC/B;oBAAC,OAAM,CAAC,EAAE;wBACP,KAAK,GAAG,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;qBACxD;oBACD,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;iBAC3B;YACL,CAAC,CAAC;YAEF,OAAO,CAAC,SAAS,GAAG;gBAChB,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC;YAEF,IAAI;gBACA,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aACzC;YAAC,OAAM,KAAK,EAAE;gBACX,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aACjD;QAEH,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;YACV,QAAQ,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,qCAAS,GAAhB,UAAiB,OAAY,EAAE,QAAa;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED;;;OAGG;IACI,qCAAS,GAAhB;QACE,OAAO,IAAI,CAAC;IACd,CAAC;IACH,wBAAC;AAAD,CAAC,AAxGD,IAwGC\"}","code":"import 'xhr2';\r\nimport { errors } from 'web3-core-helpers';\r\n/**\r\n * A class that extends Web3's HTTPProvider by adding OAuth to JSON-RPC calls.\r\n */\r\nvar OAuthHttpProvider = /** @class */ (function () {\r\n    /**\r\n     * @param host JSON-RPC endpoint\r\n     * @param timeout Timeout in seconds\r\n     * @param additionalHeaders Optional headers to include with every request\r\n     */\r\n    function OAuthHttpProvider(host, timeout, additionalHeaders) {\r\n        /**\r\n         * The access token for the current logged in user\r\n         */\r\n        this.accessToken = undefined;\r\n        this.host = host;\r\n        this.timeout = timeout || 0;\r\n        this.headers = additionalHeaders;\r\n    }\r\n    OAuthHttpProvider.prototype.setAccessToken = function (accessToken) {\r\n        this.accessToken = accessToken;\r\n    };\r\n    OAuthHttpProvider.prototype.getAccessToken = function () {\r\n        if (this.accessToken) {\r\n            return Promise.resolve(this.accessToken);\r\n        }\r\n        return Promise.reject(new Error('Access token could not be found'));\r\n    };\r\n    /**\r\n     * Prepares a new XMLHttpRequest with the proper headers\r\n     * @returns Request object that is ready for a payload.\r\n     */\r\n    OAuthHttpProvider.prototype.prepareRequest = function () {\r\n        var request = new XMLHttpRequest();\r\n        request.open('POST', this.host, true);\r\n        request.setRequestHeader('Content-Type', 'application/json');\r\n        var headers = this.headers;\r\n        if (headers) {\r\n            headers.forEach(function (header) {\r\n                request.setRequestHeader(header.name, header.value);\r\n            });\r\n        }\r\n        return this.getAccessToken().then(function (accessToken) {\r\n            request.setRequestHeader('Authorization', \"Bearer \" + accessToken.token);\r\n            return request;\r\n        });\r\n    };\r\n    OAuthHttpProvider.prototype.send = function (payload, callback) {\r\n        var _this = this;\r\n        this.prepareRequest().then(function (request) {\r\n            request.onreadystatechange = function () {\r\n                if (request.readyState === 4 && request.timeout !== 1) {\r\n                    var result = request.responseText;\r\n                    var error = null;\r\n                    try {\r\n                        result = JSON.parse(result);\r\n                    }\r\n                    catch (e) {\r\n                        error = errors.InvalidResponse(request.responseText);\r\n                    }\r\n                    callback(error, result);\r\n                }\r\n            };\r\n            request.ontimeout = function () {\r\n                callback(errors.ConnectionTimeout(_this.timeout));\r\n            };\r\n            try {\r\n                request.send(JSON.stringify(payload));\r\n            }\r\n            catch (error) {\r\n                callback(errors.InvalidConnection(_this.host));\r\n            }\r\n        }).catch(function (err) {\r\n            callback(err);\r\n        });\r\n    };\r\n    /**\r\n     * Send a web3 / JSON-RPC request asynchronously.\r\n     * @param payload The JSON-RPC request object to send\r\n     * @param callback Handler function invoked when the request has completed.\r\n     */\r\n    OAuthHttpProvider.prototype.sendAsync = function (payload, callback) {\r\n        return this.send(payload, callback);\r\n    };\r\n    /**\r\n     * Check whether we are connected to the server.\r\n     * @returns boolean if we are connected.\r\n     */\r\n    OAuthHttpProvider.prototype.connected = function () {\r\n        return true;\r\n    };\r\n    return OAuthHttpProvider;\r\n}());\r\nexport { OAuthHttpProvider };\r\n//# sourceMappingURL=oauth-http-provider.js.map","dts":{"name":"/Users/jp/Work/bitski-node/dist/types/oauth-http-provider.d.ts","writeByteOrderMark":false,"text":"import 'xhr2';\r\nimport { AccessToken } from './access-token';\r\n/**\r\n * A class that extends Web3's HTTPProvider by adding OAuth to JSON-RPC calls.\r\n */\r\nexport declare class OAuthHttpProvider {\r\n    /**\r\n     * The access token for the current logged in user\r\n     */\r\n    accessToken?: AccessToken;\r\n    /**\r\n     * The JSON-RPC endpoint\r\n     */\r\n    host: string;\r\n    timeout: number;\r\n    headers?: [any];\r\n    /**\r\n     * @param host JSON-RPC endpoint\r\n     * @param timeout Timeout in seconds\r\n     * @param additionalHeaders Optional headers to include with every request\r\n     */\r\n    constructor(host: string, timeout?: number, additionalHeaders?: [any]);\r\n    setAccessToken(accessToken?: AccessToken): void;\r\n    getAccessToken(): Promise<AccessToken>;\r\n    /**\r\n     * Prepares a new XMLHttpRequest with the proper headers\r\n     * @returns Request object that is ready for a payload.\r\n     */\r\n    private prepareRequest;\r\n    send(payload: any, callback: any): void;\r\n    /**\r\n     * Send a web3 / JSON-RPC request asynchronously.\r\n     * @param payload The JSON-RPC request object to send\r\n     * @param callback Handler function invoked when the request has completed.\r\n     */\r\n    sendAsync(payload: any, callback: any): void;\r\n    /**\r\n     * Check whether we are connected to the server.\r\n     * @returns boolean if we are connected.\r\n     */\r\n    connected(): boolean;\r\n}\r\n"}}
